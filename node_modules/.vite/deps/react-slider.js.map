{
  "version": 3,
  "sources": ["../../@babel/runtime/helpers/esm/inheritsLoose.js", "../../react-slider/src/components/ReactSlider/ReactSlider.jsx"],
  "sourcesContent": ["import setPrototypeOf from \"./setPrototypeOf.js\";\nexport default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  setPrototypeOf(subClass, superClass);\n}", "import React from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * To prevent text selection while dragging.\n * http://stackoverflow.com/questions/5429827/how-can-i-prevent-text-element-selection-with-cursor-drag\n */\nfunction pauseEvent(e) {\n    if (e && e.stopPropagation) {\n        e.stopPropagation();\n    }\n    if (e && e.preventDefault) {\n        e.preventDefault();\n    }\n    return false;\n}\n\nfunction stopPropagation(e) {\n    if (e.stopPropagation) {\n        e.stopPropagation();\n    }\n}\n\nfunction sanitizeInValue(x) {\n    if (x == null) {\n        return [];\n    }\n    return Array.isArray(x) ? x.slice() : [x];\n}\n\nfunction prepareOutValue(x) {\n    return x !== null && x.length === 1 ? x[0] : x.slice();\n}\n\nfunction trimSucceeding(length, nextValue, minDistance, max) {\n    for (let i = 0; i < length; i += 1) {\n        const padding = max - i * minDistance;\n        if (nextValue[length - 1 - i] > padding) {\n            // eslint-disable-next-line no-param-reassign\n            nextValue[length - 1 - i] = padding;\n        }\n    }\n}\n\nfunction trimPreceding(length, nextValue, minDistance, min) {\n    for (let i = 0; i < length; i += 1) {\n        const padding = min + i * minDistance;\n        if (nextValue[i] < padding) {\n            // eslint-disable-next-line no-param-reassign\n            nextValue[i] = padding;\n        }\n    }\n}\n\nfunction addHandlers(eventMap) {\n    Object.keys(eventMap).forEach(key => {\n        if (typeof document !== 'undefined') {\n            document.addEventListener(key, eventMap[key], false);\n        }\n    });\n}\n\nfunction removeHandlers(eventMap) {\n    Object.keys(eventMap).forEach(key => {\n        if (typeof document !== 'undefined') {\n            document.removeEventListener(key, eventMap[key], false);\n        }\n    });\n}\n\nfunction trimAlignValue(val, props) {\n    return alignValue(trimValue(val, props), props);\n}\n\nfunction alignValue(val, props) {\n    const valModStep = (val - props.min) % props.step;\n    let alignedValue = val - valModStep;\n\n    if (Math.abs(valModStep) * 2 >= props.step) {\n        alignedValue += valModStep > 0 ? props.step : -props.step;\n    }\n\n    return parseFloat(alignedValue.toFixed(5));\n}\n\nfunction trimValue(val, props) {\n    let trimmed = val;\n    if (trimmed <= props.min) {\n        trimmed = props.min;\n    }\n    if (trimmed >= props.max) {\n        trimmed = props.max;\n    }\n\n    return trimmed;\n}\n\nclass ReactSlider extends React.Component {\n    static displayName = 'ReactSlider';\n\n    static propTypes = {\n        /**\n         * The minimum value of the slider.\n         */\n        min: PropTypes.number,\n\n        /**\n         * The maximum value of the slider.\n         */\n        max: PropTypes.number,\n\n        /**\n         * Value to be added or subtracted on each step the slider makes.\n         * Must be greater than zero.\n         * `max - min` should be evenly divisible by the step value.\n         */\n        step: PropTypes.number,\n\n        /**\n         * The result of the function is the value to be added or subtracted\n         * when the `Page Up` or `Page Down` keys are pressed.\n         *\n         * The current `step` value will be passed as the only argument.\n         * By default, paging will modify `step` by a factor of 10.\n         */\n        pageFn: PropTypes.func,\n\n        /**\n         * The minimal distance between any pair of thumbs.\n         * Must be positive, but zero means they can sit on top of each other.\n         */\n        minDistance: PropTypes.number,\n\n        /**\n         * Determines the initial positions of the thumbs and the number of thumbs.\n         *\n         * If a number is passed a slider with one thumb will be rendered.\n         * If an array is passed each value will determine the position of one thumb.\n         * The values in the array must be sorted.\n         */\n        defaultValue: PropTypes.oneOfType([PropTypes.number, PropTypes.arrayOf(PropTypes.number)]),\n\n        /**\n         * Like `defaultValue` but for\n         * [controlled components](http://facebook.github.io/react/docs/forms.html#controlled-components).\n         */\n        // eslint-disable-next-line zillow/react/require-default-props\n        value: PropTypes.oneOfType([PropTypes.number, PropTypes.arrayOf(PropTypes.number)]),\n\n        /**\n         * Determines whether the slider moves horizontally (from left to right)\n         * or vertically (from top to bottom).\n         */\n        orientation: PropTypes.oneOf(['horizontal', 'vertical']),\n\n        /**\n         * The css class set on the slider node.\n         */\n        className: PropTypes.string,\n\n        /**\n         * The css class set on each thumb node.\n         *\n         * In addition each thumb will receive a numbered css class of the form\n         * `${thumbClassName}-${i}`, e.g. `thumb-0`, `thumb-1`, ...\n         */\n        thumbClassName: PropTypes.string,\n\n        /**\n         * The css class set on the thumb that is currently being moved.\n         */\n        thumbActiveClassName: PropTypes.string,\n\n        /**\n         * If `true` tracks between the thumbs will be rendered.\n         */\n        withTracks: PropTypes.bool,\n\n        /**\n         * The css class set on the tracks between the thumbs.\n         * In addition track fragment will receive a numbered css class of the form\n         * `${trackClassName}-${i}`, e.g. `track-0`, `track-1`, ...\n         */\n        trackClassName: PropTypes.string,\n\n        /**\n         * If `true` the active thumb will push other thumbs\n         * within the constraints of `min`, `max`, `step` and `minDistance`.\n         */\n        pearling: PropTypes.bool,\n\n        /**\n         * If `true` the thumbs can't be moved.\n         */\n        disabled: PropTypes.bool,\n\n        /**\n         * Disables thumb move when clicking the slider track\n         */\n        snapDragDisabled: PropTypes.bool,\n\n        /**\n         * Inverts the slider.\n         */\n        invert: PropTypes.bool,\n\n        /**\n         * Shows passed marks on the track, if true it shows all the marks,\n         * if an array of numbers it shows just the passed marks, if a number is passed\n         * it shows just the marks in that steps: like passing 3 shows the marks 3, 6, 9\n         */\n        marks: PropTypes.oneOfType([\n            PropTypes.arrayOf(PropTypes.number),\n            PropTypes.bool,\n            PropTypes.number,\n        ]),\n\n        /**\n         * The css class set on the marks.\n         */\n        markClassName: PropTypes.string,\n\n        /**\n         * Callback called before starting to move a thumb. The callback will only be called if the\n         * action will result in a change. The function will be called with two arguments, the first\n         * being the initial value(s) the second being thumb index.\n         */\n        // eslint-disable-next-line max-len\n        // eslint-disable-next-line zillow/react/require-default-props, zillow/react/no-unused-prop-types\n        onBeforeChange: PropTypes.func,\n\n        /**\n         * Callback called on every value change.\n         * The function will be called with two arguments, the first being the new value(s)\n         * the second being thumb index.\n         */\n        // eslint-disable-next-line max-len\n        // eslint-disable-next-line zillow/react/require-default-props, zillow/react/no-unused-prop-types\n        onChange: PropTypes.func,\n\n        /**\n         * Callback called only after moving a thumb has ended. The callback will only be called if\n         * the action resulted in a change. The function will be called with two arguments, the\n         * first being the result value(s) the second being thumb index.\n         */\n        // eslint-disable-next-line max-len\n        // eslint-disable-next-line zillow/react/require-default-props, zillow/react/no-unused-prop-types\n        onAfterChange: PropTypes.func,\n\n        /**\n         * Callback called when the the slider is clicked (thumb or tracks).\n         * Receives the value at the clicked position as argument.\n         */\n        // eslint-disable-next-line zillow/react/require-default-props\n        onSliderClick: PropTypes.func,\n\n        /**\n         * aria-label for screen-readers to apply to the thumbs.\n         * Use an array for more than one thumb.\n         * The length of the array must match the number of thumbs in the value array.\n         */\n        // eslint-disable-next-line zillow/react/require-default-props\n        ariaLabel: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),\n\n        /**\n         * aria-labelledby for screen-readers to apply to the thumbs.\n         * Used when slider rendered with separate label.\n         * Use an array for more than one thumb.\n         * The length of the array must match the number of thumbs in the value array.\n         */\n        // eslint-disable-next-line zillow/react/require-default-props\n        ariaLabelledby: PropTypes.oneOfType([\n            PropTypes.string,\n            PropTypes.arrayOf(PropTypes.string),\n        ]),\n\n        /**\n         * aria-valuetext for screen-readers.\n         * Can be a static string, or a function that returns a string.\n         * The function will be passed a single argument,\n         * an object with the following properties:\n         *\n         *     state => `Value: ${state.value}`\n         *\n         * - `state.index` {`number`} the index of the thumb\n         * - `state.value` {`number` | `array`} the current value state\n         * - `state.valueNow` {`number`} the value of the thumb (i.e. aria-valuenow)\n         */\n        // eslint-disable-next-line zillow/react/require-default-props\n        ariaValuetext: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n\n        /**\n         * Provide a custom render function for the track node.\n         * The render function will be passed two arguments,\n         * an object with props that should be added to your handle node,\n         * and an object with track and slider state:\n         *\n         *     (props, state) => <div {...props} />\n         *\n         * - `props` {`object`} props to be spread into your track node\n         * - `state.index` {`number`} the index of the track\n         * - `state.value` {`number` | `array`} the current value state\n         */\n        renderTrack: PropTypes.func,\n\n        /**\n         * Provide a custom render function for dynamic thumb content.\n         * The render function will be passed two arguments,\n         * an object with props that should be added to your thumb node,\n         * and an object with thumb and slider state:\n         *\n         *     (props, state) => <div {...props} />\n         *\n         * - `props` {`object`} props to be spread into your thumb node\n         * - `state.index` {`number`} the index of the thumb\n         * - `state.value` {`number` | `array`} the current value state\n         * - `state.valueNow` {`number`} the value of the thumb (i.e. aria-valuenow)\n         */\n        // eslint-disable-next-line zillow/react/require-default-props\n        renderThumb: PropTypes.func,\n\n        /**\n         * Provide a custom render function for the mark node.\n         * The render function will be passed one argument,\n         * an object with props that should be added to your handle node\n         *\n         *     (props) => <span {...props} />\n         *\n         * - `props` {`object`} props to be spread into your track node\n         */\n        renderMark: PropTypes.func,\n    };\n\n    static defaultProps = {\n        min: 0,\n        max: 100,\n        step: 1,\n        pageFn: step => step * 10,\n        minDistance: 0,\n        defaultValue: 0,\n        orientation: 'horizontal',\n        className: 'slider',\n        thumbClassName: 'thumb',\n        thumbActiveClassName: 'active',\n        trackClassName: 'track',\n        markClassName: 'mark',\n        withTracks: true,\n        pearling: false,\n        disabled: false,\n        snapDragDisabled: false,\n        invert: false,\n        marks: [],\n        renderThumb: props => <div {...props} />,\n        renderTrack: props => <div {...props} />,\n        renderMark: props => <span {...props} />,\n    };\n\n    constructor(props) {\n        super(props);\n\n        let value = sanitizeInValue(props.value);\n        if (!value.length) {\n            value = sanitizeInValue(props.defaultValue);\n        }\n\n        // array for storing resize timeouts ids\n        this.pendingResizeTimeouts = [];\n\n        const zIndices = [];\n        for (let i = 0; i < value.length; i += 1) {\n            value[i] = trimAlignValue(value[i], props);\n            zIndices.push(i);\n        }\n\n        this.resizeObserver = null;\n        this.resizeElementRef = React.createRef();\n\n        this.state = {\n            index: -1,\n            upperBound: 0,\n            sliderLength: 0,\n            value,\n            zIndices,\n        };\n    }\n\n    componentDidMount() {\n        if (typeof window !== 'undefined') {\n            this.resizeObserver = new ResizeObserver(this.handleResize);\n            this.resizeObserver.observe(this.resizeElementRef.current);\n            this.resize();\n        }\n    }\n\n    // Keep the internal `value` consistent with an outside `value` if present.\n    // This basically allows the slider to be a controlled component.\n    static getDerivedStateFromProps(props, state) {\n        const value = sanitizeInValue(props.value);\n        if (!value.length) {\n            return null;\n        }\n\n        // Do not allow controlled upates to happen while we have pending updates\n        if (state.pending) {\n            return null;\n        }\n\n        return {\n            value: value.map(item => trimAlignValue(item, props)),\n        };\n    }\n\n    componentDidUpdate() {\n        // If an upperBound has not yet been determined (due to the component being hidden\n        // during the mount event, or during the last resize), then calculate it now\n        if (this.state.upperBound === 0) {\n            this.resize();\n        }\n    }\n\n    componentWillUnmount() {\n        this.clearPendingResizeTimeouts();\n        if (this.resizeObserver) {\n            this.resizeObserver.disconnect();\n        }\n    }\n\n    onKeyUp = () => {\n        this.onEnd();\n    };\n\n    onMouseUp = () => {\n        this.onEnd(this.getMouseEventMap());\n    };\n\n    onTouchEnd = e => {\n        e.preventDefault();\n        this.onEnd(this.getTouchEventMap());\n    };\n\n    onBlur = () => {\n        this.setState({ index: -1 }, this.onEnd(this.getKeyDownEventMap()));\n    };\n\n    onEnd(eventMap) {\n        if (eventMap) {\n            removeHandlers(eventMap);\n        }\n        if (this.hasMoved) {\n            this.fireChangeEvent('onAfterChange');\n        }\n\n        // Allow controlled updates to continue\n        this.setState({ pending: false });\n\n        this.hasMoved = false;\n    }\n\n    onMouseMove = e => {\n        // Prevent controlled updates from happening while mouse is moving\n        this.setState({ pending: true });\n\n        const position = this.getMousePosition(e);\n        const diffPosition = this.getDiffPosition(position[0]);\n        const newValue = this.getValueFromPosition(diffPosition);\n        this.move(newValue);\n    };\n\n    onTouchMove = e => {\n        if (e.touches.length > 1) {\n            return;\n        }\n\n        // Prevent controlled updates from happending while touch is moving\n        this.setState({ pending: true });\n\n        const position = this.getTouchPosition(e);\n\n        if (typeof this.isScrolling === 'undefined') {\n            const diffMainDir = position[0] - this.startPosition[0];\n            const diffScrollDir = position[1] - this.startPosition[1];\n            this.isScrolling = Math.abs(diffScrollDir) > Math.abs(diffMainDir);\n        }\n\n        if (this.isScrolling) {\n            this.setState({ index: -1 });\n            return;\n        }\n\n        const diffPosition = this.getDiffPosition(position[0]);\n        const newValue = this.getValueFromPosition(diffPosition);\n\n        this.move(newValue);\n    };\n\n    onKeyDown = e => {\n        if (e.ctrlKey || e.shiftKey || e.altKey || e.metaKey) {\n            return;\n        }\n\n        // Prevent controlled updates from happening while a key is pressed\n        this.setState({ pending: true });\n\n        switch (e.key) {\n            case 'ArrowLeft':\n            case 'ArrowDown':\n            case 'Left':\n            case 'Down':\n                e.preventDefault();\n                this.moveDownByStep();\n                break;\n            case 'ArrowRight':\n            case 'ArrowUp':\n            case 'Right':\n            case 'Up':\n                e.preventDefault();\n                this.moveUpByStep();\n                break;\n            case 'Home':\n                e.preventDefault();\n                this.move(this.props.min);\n                break;\n            case 'End':\n                e.preventDefault();\n                this.move(this.props.max);\n                break;\n            case 'PageDown':\n                e.preventDefault();\n                this.moveDownByStep(this.props.pageFn(this.props.step));\n                break;\n            case 'PageUp':\n                e.preventDefault();\n                this.moveUpByStep(this.props.pageFn(this.props.step));\n                break;\n            default:\n        }\n    };\n\n    onSliderMouseDown = e => {\n        // do nothing if disabled or right click\n        if (this.props.disabled || e.button === 2) {\n            return;\n        }\n\n        // Prevent controlled updates from happening while mouse is moving\n        this.setState({ pending: true });\n\n        if (!this.props.snapDragDisabled) {\n            const position = this.getMousePosition(e);\n            this.forceValueFromPosition(position[0], i => {\n                this.start(i, position[0]);\n                addHandlers(this.getMouseEventMap());\n            });\n        }\n\n        pauseEvent(e);\n    };\n\n    onSliderClick = e => {\n        if (this.props.disabled) {\n            return;\n        }\n\n        if (this.props.onSliderClick && !this.hasMoved) {\n            const position = this.getMousePosition(e);\n            const valueAtPos = trimAlignValue(\n                this.calcValue(this.calcOffsetFromPosition(position[0])),\n                this.props\n            );\n            this.props.onSliderClick(valueAtPos);\n        }\n    };\n\n    getValue() {\n        return prepareOutValue(this.state.value);\n    }\n\n    getClosestIndex(pixelOffset) {\n        let minDist = Number.MAX_VALUE;\n        let closestIndex = -1;\n\n        const { value } = this.state;\n        const l = value.length;\n\n        for (let i = 0; i < l; i += 1) {\n            const offset = this.calcOffset(value[i]);\n            const dist = Math.abs(pixelOffset - offset);\n            if (dist < minDist) {\n                minDist = dist;\n                closestIndex = i;\n            }\n        }\n\n        return closestIndex;\n    }\n\n    getMousePosition(e) {\n        return [e[`page${this.axisKey()}`], e[`page${this.orthogonalAxisKey()}`]];\n    }\n\n    getTouchPosition(e) {\n        const touch = e.touches[0];\n        return [touch[`page${this.axisKey()}`], touch[`page${this.orthogonalAxisKey()}`]];\n    }\n\n    getKeyDownEventMap() {\n        return {\n            keydown: this.onKeyDown,\n            keyup: this.onKeyUp,\n            focusout: this.onBlur,\n        };\n    }\n\n    getMouseEventMap() {\n        return {\n            mousemove: this.onMouseMove,\n            mouseup: this.onMouseUp,\n        };\n    }\n\n    getTouchEventMap() {\n        return {\n            touchmove: this.onTouchMove,\n            touchend: this.onTouchEnd,\n        };\n    }\n\n    getValueFromPosition(position) {\n        const diffValue =\n            (position / (this.state.sliderLength - this.state.thumbSize)) *\n            (this.props.max - this.props.min);\n        return trimAlignValue(this.state.startValue + diffValue, this.props);\n    }\n\n    getDiffPosition(position) {\n        let diffPosition = position - this.state.startPosition;\n        if (this.props.invert) {\n            diffPosition *= -1;\n        }\n        return diffPosition;\n    }\n\n    // create the `keydown` handler for the i-th thumb\n    createOnKeyDown = i => e => {\n        if (this.props.disabled) {\n            return;\n        }\n        this.start(i);\n        addHandlers(this.getKeyDownEventMap());\n        pauseEvent(e);\n    };\n\n    // create the `mousedown` handler for the i-th thumb\n    createOnMouseDown = i => e => {\n        // do nothing if disabled or right click\n        if (this.props.disabled || e.button === 2) {\n            return;\n        }\n\n        // Prevent controlled updates from happending while mouse is moving\n        this.setState({ pending: true });\n\n        const position = this.getMousePosition(e);\n        this.start(i, position[0]);\n        addHandlers(this.getMouseEventMap());\n        pauseEvent(e);\n    };\n\n    // create the `touchstart` handler for the i-th thumb\n    createOnTouchStart = i => e => {\n        if (this.props.disabled || e.touches.length > 1) {\n            return;\n        }\n\n        // Prevent controlled updates from happending while touch is moving\n        this.setState({ pending: true });\n\n        const position = this.getTouchPosition(e);\n        this.startPosition = position;\n        // don't know yet if the user is trying to scroll\n        this.isScrolling = undefined;\n        this.start(i, position[0]);\n        addHandlers(this.getTouchEventMap());\n        stopPropagation(e);\n    };\n\n    handleResize = () => {\n        // setTimeout of 0 gives element enough time to have assumed its new size if\n        // it is being resized\n        const resizeTimeout = window.setTimeout(() => {\n            // drop this timeout from pendingResizeTimeouts to reduce memory usage\n            this.pendingResizeTimeouts.shift();\n            this.resize();\n        }, 0);\n\n        this.pendingResizeTimeouts.push(resizeTimeout);\n    };\n\n    resize() {\n        const { slider, thumb0: thumb } = this;\n        if (!slider || !thumb) {\n            return;\n        }\n\n        const sizeKey = this.sizeKey();\n\n        // For the slider size, we want to use the client width/height, excluding any borders\n        const sliderRect = slider.getBoundingClientRect();\n        const sliderSize = slider[sizeKey];\n        const sliderMax = sliderRect[this.posMaxKey()];\n        const sliderMin = sliderRect[this.posMinKey()];\n\n        // For the thumb size, we want to use the outer width/height, including any borders\n        const thumbRect = thumb.getBoundingClientRect();\n        const thumbSize = thumbRect[sizeKey.replace('client', '').toLowerCase()];\n\n        const upperBound = sliderSize - thumbSize;\n        const sliderLength = Math.abs(sliderMax - sliderMin);\n\n        if (\n            this.state.upperBound !== upperBound ||\n            this.state.sliderLength !== sliderLength ||\n            this.state.thumbSize !== thumbSize\n        ) {\n            this.setState({\n                upperBound,\n                sliderLength,\n                thumbSize,\n            });\n        }\n    }\n\n    // calculates the offset of a thumb in pixels based on its value.\n    calcOffset(value) {\n        const range = this.props.max - this.props.min;\n        if (range === 0) {\n            return 0;\n        }\n        const ratio = (value - this.props.min) / range;\n        return ratio * this.state.upperBound;\n    }\n\n    // calculates the value corresponding to a given pixel offset, i.e. the inverse of `calcOffset`.\n    calcValue(offset) {\n        const ratio = offset / this.state.upperBound;\n        return ratio * (this.props.max - this.props.min) + this.props.min;\n    }\n\n    calcOffsetFromPosition(position) {\n        const { slider } = this;\n\n        const sliderRect = slider.getBoundingClientRect();\n        const sliderMax = sliderRect[this.posMaxKey()];\n        const sliderMin = sliderRect[this.posMinKey()];\n\n        // The `position` value passed in is the mouse position based on the window height.\n        // The slider bounding rect is based on the viewport, so we must add the window scroll\n        // offset to normalize the values.\n        const windowOffset = window[`page${this.axisKey()}Offset`];\n        const sliderStart = windowOffset + (this.props.invert ? sliderMax : sliderMin);\n\n        let pixelOffset = position - sliderStart;\n        if (this.props.invert) {\n            pixelOffset = this.state.sliderLength - pixelOffset;\n        }\n        pixelOffset -= this.state.thumbSize / 2;\n        return pixelOffset;\n    }\n\n    // Snaps the nearest thumb to the value corresponding to `position`\n    // and calls `callback` with that thumb's index.\n    forceValueFromPosition(position, callback) {\n        const pixelOffset = this.calcOffsetFromPosition(position);\n        const closestIndex = this.getClosestIndex(pixelOffset);\n        const nextValue = trimAlignValue(this.calcValue(pixelOffset), this.props);\n\n        // Clone this.state.value since we'll modify it temporarily\n        // eslint-disable-next-line zillow/react/no-access-state-in-setstate\n        const value = this.state.value.slice();\n        value[closestIndex] = nextValue;\n\n        // Prevents the slider from shrinking below `props.minDistance`\n        for (let i = 0; i < value.length - 1; i += 1) {\n            if (value[i + 1] - value[i] < this.props.minDistance) {\n                return;\n            }\n        }\n\n        this.fireChangeEvent('onBeforeChange');\n        this.hasMoved = true;\n        this.setState({ value }, () => {\n            callback(closestIndex);\n            this.fireChangeEvent('onChange');\n        });\n    }\n\n    // clear all pending timeouts to avoid error messages after unmounting\n    clearPendingResizeTimeouts() {\n        do {\n            const nextTimeout = this.pendingResizeTimeouts.shift();\n\n            clearTimeout(nextTimeout);\n        } while (this.pendingResizeTimeouts.length);\n    }\n\n    start(i, position) {\n        const thumbRef = this[`thumb${i}`];\n        if (thumbRef) {\n            thumbRef.focus();\n        }\n\n        const { zIndices } = this.state;\n        // remove wherever the element is\n        zIndices.splice(zIndices.indexOf(i), 1);\n        // add to end\n        zIndices.push(i);\n\n        this.setState(prevState => ({\n            startValue: prevState.value[i],\n            startPosition: position !== undefined ? position : prevState.startPosition,\n            index: i,\n            zIndices,\n        }));\n    }\n\n    moveUpByStep(step = this.props.step) {\n        const oldValue = this.state.value[this.state.index];\n\n        // if the slider is inverted and horizontal we want to honor the inverted value\n        const newValue =\n            this.props.invert && this.props.orientation === 'horizontal'\n                ? oldValue - step\n                : oldValue + step;\n\n        const trimAlign = trimAlignValue(newValue, this.props);\n        this.move(Math.min(trimAlign, this.props.max));\n    }\n\n    moveDownByStep(step = this.props.step) {\n        const oldValue = this.state.value[this.state.index];\n\n        // if the slider is inverted and horizontal we want to honor the inverted value\n        const newValue =\n            this.props.invert && this.props.orientation === 'horizontal'\n                ? oldValue + step\n                : oldValue - step;\n\n        const trimAlign = trimAlignValue(newValue, this.props);\n        this.move(Math.max(trimAlign, this.props.min));\n    }\n\n    move(newValue) {\n        // Clone this.state.value since we'll modify it temporarily\n        // eslint-disable-next-line zillow/react/no-access-state-in-setstate\n        const value = this.state.value.slice();\n        const { index } = this.state;\n        const { length } = value;\n\n        // Short circuit if the value is not changing\n        const oldValue = value[index];\n        if (newValue === oldValue) {\n            return;\n        }\n\n        // Trigger only before the first movement\n        if (!this.hasMoved) {\n            this.fireChangeEvent('onBeforeChange');\n        }\n        this.hasMoved = true;\n\n        // if \"pearling\" (= thumbs pushing each other) is disabled,\n        // prevent the thumb from getting closer than `minDistance` to the previous or next thumb.\n        const { pearling, max, min, minDistance } = this.props;\n        if (!pearling) {\n            if (index > 0) {\n                const valueBefore = value[index - 1];\n                if (newValue < valueBefore + minDistance) {\n                    // eslint-disable-next-line no-param-reassign\n                    newValue = valueBefore + minDistance;\n                }\n            }\n\n            if (index < length - 1) {\n                const valueAfter = value[index + 1];\n                if (newValue > valueAfter - minDistance) {\n                    // eslint-disable-next-line no-param-reassign\n                    newValue = valueAfter - minDistance;\n                }\n            }\n        }\n\n        value[index] = newValue;\n\n        // if \"pearling\" is enabled, let the current thumb push the pre- and succeeding thumbs.\n        if (pearling && length > 1) {\n            if (newValue > oldValue) {\n                this.pushSucceeding(value, minDistance, index);\n                trimSucceeding(length, value, minDistance, max);\n            } else if (newValue < oldValue) {\n                this.pushPreceding(value, minDistance, index);\n                trimPreceding(length, value, minDistance, min);\n            }\n        }\n\n        // Normally you would use `shouldComponentUpdate`,\n        // but since the slider is a low-level component,\n        // the extra complexity might be worth the extra performance.\n        this.setState({ value }, this.fireChangeEvent.bind(this, 'onChange'));\n    }\n\n    pushSucceeding(value, minDistance, index) {\n        let i;\n        let padding;\n        for (\n            i = index, padding = value[i] + minDistance;\n            value[i + 1] !== null && padding > value[i + 1];\n            i += 1, padding = value[i] + minDistance\n        ) {\n            // eslint-disable-next-line no-param-reassign\n            value[i + 1] = alignValue(padding, this.props);\n        }\n    }\n\n    pushPreceding(value, minDistance, index) {\n        for (\n            let i = index, padding = value[i] - minDistance;\n            value[i - 1] !== null && padding < value[i - 1];\n            i -= 1, padding = value[i] - minDistance\n        ) {\n            // eslint-disable-next-line no-param-reassign\n            value[i - 1] = alignValue(padding, this.props);\n        }\n    }\n\n    axisKey() {\n        if (this.props.orientation === 'vertical') {\n            return 'Y';\n        }\n        // Defaults to 'horizontal';\n        return 'X';\n    }\n\n    orthogonalAxisKey() {\n        if (this.props.orientation === 'vertical') {\n            return 'X';\n        }\n        // Defaults to 'horizontal'\n        return 'Y';\n    }\n\n    posMinKey() {\n        if (this.props.orientation === 'vertical') {\n            return this.props.invert ? 'bottom' : 'top';\n        }\n        // Defaults to 'horizontal'\n        return this.props.invert ? 'right' : 'left';\n    }\n\n    posMaxKey() {\n        if (this.props.orientation === 'vertical') {\n            return this.props.invert ? 'top' : 'bottom';\n        }\n        // Defaults to 'horizontal'\n        return this.props.invert ? 'left' : 'right';\n    }\n\n    sizeKey() {\n        if (this.props.orientation === 'vertical') {\n            return 'clientHeight';\n        }\n        // Defaults to 'horizontal'\n        return 'clientWidth';\n    }\n\n    fireChangeEvent(event) {\n        if (this.props[event]) {\n            this.props[event](prepareOutValue(this.state.value), this.state.index);\n        }\n    }\n\n    buildThumbStyle(offset, i) {\n        const style = {\n            position: 'absolute',\n            touchAction: 'none',\n            willChange: this.state.index >= 0 ? this.posMinKey() : undefined,\n            zIndex: this.state.zIndices.indexOf(i) + 1,\n        };\n        style[this.posMinKey()] = `${offset}px`;\n        return style;\n    }\n\n    buildTrackStyle(min, max) {\n        const obj = {\n            position: 'absolute',\n            willChange:\n                this.state.index >= 0 ? `${this.posMinKey()},${this.posMaxKey()}` : undefined,\n        };\n        obj[this.posMinKey()] = min;\n        obj[this.posMaxKey()] = max;\n        return obj;\n    }\n\n    buildMarkStyle(offset) {\n        return {\n            position: 'absolute',\n            [this.posMinKey()]: offset,\n        };\n    }\n\n    renderThumb = (style, i) => {\n        const className = `${this.props.thumbClassName} ${this.props.thumbClassName}-${i} ${\n            this.state.index === i ? this.props.thumbActiveClassName : ''\n        }`;\n\n        const props = {\n            'ref': r => {\n                this[`thumb${i}`] = r;\n            },\n            'key': `${this.props.thumbClassName}-${i}`,\n            className,\n            style,\n            'onMouseDown': this.createOnMouseDown(i),\n            'onTouchStart': this.createOnTouchStart(i),\n            'onFocus': this.createOnKeyDown(i),\n            'tabIndex': 0,\n            'role': 'slider',\n            'aria-orientation': this.props.orientation,\n            'aria-valuenow': this.state.value[i],\n            'aria-valuemin': this.props.min,\n            'aria-valuemax': this.props.max,\n            'aria-label': Array.isArray(this.props.ariaLabel)\n                ? this.props.ariaLabel[i]\n                : this.props.ariaLabel,\n            'aria-labelledby': Array.isArray(this.props.ariaLabelledby)\n                ? this.props.ariaLabelledby[i]\n                : this.props.ariaLabelledby,\n            'aria-disabled': this.props.disabled,\n        };\n\n        const state = {\n            index: i,\n            value: prepareOutValue(this.state.value),\n            valueNow: this.state.value[i],\n        };\n\n        if (this.props.ariaValuetext) {\n            props['aria-valuetext'] =\n                typeof this.props.ariaValuetext === 'string'\n                    ? this.props.ariaValuetext\n                    : this.props.ariaValuetext(state);\n        }\n\n        return this.props.renderThumb(props, state);\n    };\n\n    renderThumbs(offset) {\n        const { length } = offset;\n\n        const styles = [];\n        for (let i = 0; i < length; i += 1) {\n            styles[i] = this.buildThumbStyle(offset[i], i);\n        }\n\n        const res = [];\n        for (let i = 0; i < length; i += 1) {\n            res[i] = this.renderThumb(styles[i], i);\n        }\n        return res;\n    }\n\n    renderTrack = (i, offsetFrom, offsetTo) => {\n        const props = {\n            key: `${this.props.trackClassName}-${i}`,\n            className: `${this.props.trackClassName} ${this.props.trackClassName}-${i}`,\n            style: this.buildTrackStyle(offsetFrom, this.state.upperBound - offsetTo),\n        };\n        const state = {\n            index: i,\n            value: prepareOutValue(this.state.value),\n        };\n        return this.props.renderTrack(props, state);\n    };\n\n    renderTracks(offset) {\n        const tracks = [];\n        const lastIndex = offset.length - 1;\n\n        tracks.push(this.renderTrack(0, 0, offset[0]));\n\n        for (let i = 0; i < lastIndex; i += 1) {\n            tracks.push(this.renderTrack(i + 1, offset[i], offset[i + 1]));\n        }\n\n        tracks.push(this.renderTrack(lastIndex + 1, offset[lastIndex], this.state.upperBound));\n\n        return tracks;\n    }\n\n    renderMarks() {\n        let { marks } = this.props;\n\n        const range = this.props.max - this.props.min + 1;\n\n        if (typeof marks === 'boolean') {\n            marks = Array.from({ length: range }).map((_, key) => key);\n        } else if (typeof marks === 'number') {\n            marks = Array.from({ length: range })\n                .map((_, key) => key)\n                .filter(key => key % marks === 0);\n        }\n\n        return marks\n            .map(parseFloat)\n            .sort((a, b) => a - b)\n            .map(mark => {\n                const offset = this.calcOffset(mark);\n\n                const props = {\n                    key: mark,\n                    className: this.props.markClassName,\n                    style: this.buildMarkStyle(offset),\n                };\n\n                return this.props.renderMark(props);\n            });\n    }\n\n    render() {\n        const offset = [];\n        const { value } = this.state;\n        const l = value.length;\n        for (let i = 0; i < l; i += 1) {\n            offset[i] = this.calcOffset(value[i], i);\n        }\n\n        const tracks = this.props.withTracks ? this.renderTracks(offset) : null;\n        const thumbs = this.renderThumbs(offset);\n        const marks = this.props.marks ? this.renderMarks() : null;\n\n        return React.createElement(\n            'div',\n            {\n                ref: r => {\n                    this.slider = r;\n                    this.resizeElementRef.current = r;\n                },\n                style: { position: 'relative' },\n                className: this.props.className + (this.props.disabled ? ' disabled' : ''),\n                onMouseDown: this.onSliderMouseDown,\n                onClick: this.onSliderClick,\n            },\n            tracks,\n            thumbs,\n            marks\n        );\n    }\n}\n\nexport default ReactSlider;\n"],
  "mappings": "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",
  "names": ["pauseEvent", "e", "stopPropagation", "preventDefault", "sanitizeInValue", "x", "Array", "isArray", "slice", "prepareOutValue", "length", "trimSucceeding", "nextValue", "minDistance", "max", "i", "padding", "trimPreceding", "min", "addHandlers", "eventMap", "Object", "keys", "forEach", "key", "document", "addEventListener", "removeHandlers", "removeEventListener", "trimAlignValue", "val", "props", "alignValue", "trimValue", "valModStep", "step", "alignedValue", "Math", "abs", "parseFloat", "toFixed", "trimmed", "ReactSlider", "onKeyUp", "onEnd", "onMouseUp", "getMouseEventMap", "onTouchEnd", "getTouchEventMap", "onBlur", "setState", "index", "getKeyDownEventMap", "onMouseMove", "pending", "position", "getMousePosition", "diffPosition", "getDiffPosition", "newValue", "getValueFromPosition", "move", "onTouchMove", "touches", "getTouchPosition", "isScrolling", "diffMainDir", "startPosition", "diffScrollDir", "onKeyDown", "ctrlKey", "shiftKey", "altKey", "metaKey", "moveDownByStep", "moveUpByStep", "pageFn", "onSliderMouseDown", "disabled", "button", "snapDragDisabled", "forceValueFromPosition", "start", "onSliderClick", "hasMoved", "valueAtPos", "calcValue", "calcOffsetFromPosition", "createOnKeyDown", "createOnMouseDown", "createOnTouchStart", "undefined", "handleResize", "resizeTimeout", "window", "setTimeout", "pendingResizeTimeouts", "shift", "resize", "push", "renderThumb", "style", "className", "thumbClassName", "state", "thumbActiveClassName", "r", "orientation", "value", "ariaLabel", "ariaLabelledby", "valueNow", "ariaValuetext", "renderTrack", "offsetFrom", "offsetTo", "trackClassName", "buildTrackStyle", "upperBound", "defaultValue", "zIndices", "resizeObserver", "resizeElementRef", "React", "createRef", "sliderLength", "componentDidMount", "ResizeObserver", "observe", "current", "getDerivedStateFromProps", "map", "item", "componentDidUpdate", "componentWillUnmount", "clearPendingResizeTimeouts", "disconnect", "fireChangeEvent", "getValue", "getClosestIndex", "pixelOffset", "minDist", "Number", "MAX_VALUE", "closestIndex", "l", "offset", "calcOffset", "dist", "axisKey", "orthogonalAxisKey", "touch", "keydown", "keyup", "focusout", "mousemove", "mouseup", "touchmove", "touchend", "diffValue", "thumbSize", "startValue", "invert", "slider", "thumb0", "thumb", "sizeKey", "sliderRect", "getBoundingClientRect", "sliderSize", "sliderMax", "posMaxKey", "sliderMin", "posMinKey", "thumbRect", "replace", "toLowerCase", "range", "ratio", "windowOffset", "sliderStart", "callback", "nextTimeout", "clearTimeout", "thumbRef", "focus", "splice", "indexOf", "prevState", "oldValue", "trimAlign", "pearling", "valueBefore", "valueAfter", "pushSucceeding", "pushPreceding", "bind", "event", "buildThumbStyle", "touchAction", "willChange", "zIndex", "obj", "buildMarkStyle", "renderThumbs", "styles", "res", "renderTracks", "tracks", "lastIndex", "renderMarks", "marks", "from", "_", "filter", "sort", "a", "b", "mark", "markClassName", "renderMark", "render", "withTracks", "thumbs", "createElement", "ref", "onMouseDown", "onClick", "Component", "displayName", "defaultProps", "propTypes", "PropTypes", "number", "func", "oneOfType", "arrayOf", "oneOf", "string", "bool", "onBeforeChange", "onChange", "onAfterChange"]
}
